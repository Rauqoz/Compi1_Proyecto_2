/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,12],$V3=[1,11],$V4=[1,13],$V5=[1,14],$V6=[1,8],$V7=[5,20,22,23,24,25,26,28],$V8=[12,27,68],$V9=[2,88],$Va=[1,35],$Vb=[1,36],$Vc=[1,53],$Vd=[1,54],$Ve=[1,50],$Vf=[1,47],$Vg=[1,48],$Vh=[1,51],$Vi=[1,52],$Vj=[1,59],$Vk=[1,60],$Vl=[1,61],$Vm=[1,62],$Vn=[1,63],$Vo=[1,58],$Vp=[5,8,20,22,23,24,25,26,28,31,34,37,38,40,45,48,50,51,52,54],$Vq=[1,78],$Vr=[11,12,27,42,68],$Vs=[1,79],$Vt=[1,80],$Vu=[1,81],$Vv=[11,12,27,42,44,49,58,59,60,61,62,63,65,66,68,72,73],$Vw=[1,85],$Vx=[11,68],$Vy=[1,113],$Vz=[1,114],$VA=[1,117],$VB=[1,118],$VC=[1,119],$VD=[1,120],$VE=[1,121],$VF=[1,122],$VG=[1,123],$VH=[1,124],$VI=[1,125],$VJ=[1,126],$VK=[1,132],$VL=[1,133],$VM=[8,20,22,23,24,25,26,31,34,37,38,40,45,48,50,51,52,54],$VN=[1,151],$VO=[1,186],$VP=[31,48,50],$VQ=[11,12],$VR=[11,12,65,66],$VS=[1,253],$VT=[1,254],$VU=[1,259],$VV=[8,20,22,23,24,25,26,31,34,37,38,40,45,48,50,51,52,54,56],$VW=[1,282];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"declaraciones":4,"EOF":5,"instrucciones":6,"instruccion":7,"RIMPRIMIR":8,"PARIZQ":9,"expresion_cadenas":10,"PARDER":11,"PTCOMA":12,"asignacion":13,"sentencias":14,"declaracion":15,"metodo":16,"funcion":17,"main":18,"asignaciones":19,"RNUMERO":20,"lista_id":21,"RSTRING":22,"RBOOL":23,"RCHAR":24,"RDOUBLE":25,"IDENTIFICADOR":26,"IGUAL":27,"RVOID":28,"primitivos":29,"LLAVIZQ":30,"LLAVDER":31,"RMAIN":32,"sentencia_retorno":33,"RMIENTRAS":34,"expresion_logica":35,"sentencia_retornos":36,"RDO":37,"RIF":38,"sentencia_controles":39,"RPARA":40,"expresion":41,"MAS":42,"MENOSS":43,"MENOS":44,"RSWITCH":45,"casos":46,"caso_evaluar":47,"RCASE":48,"DOSPTS":49,"RDEFAULT":50,"RRETURN":51,"RCONTINUE":52,"sentencia_switch":53,"RBREAK":54,"sentencia_control":55,"RELSE":56,"expresion_relacional":57,"MAYQUE":58,"MENQUE":59,"MAYIGQUE":60,"MENIGQUE":61,"DOBLEIG":62,"NOIG":63,"NOT":64,"AND":65,"OR":66,"parametos":67,"COMA":68,"expresion_cadena":69,"CADENA":70,"HTML":71,"POR":72,"DIVIDIDO":73,"ENTERO":74,"DECIMAL":75,"primitivo":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RIMPRIMIR",9:"PARIZQ",11:"PARDER",12:"PTCOMA",20:"RNUMERO",22:"RSTRING",23:"RBOOL",24:"RCHAR",25:"RDOUBLE",26:"IDENTIFICADOR",27:"IGUAL",28:"RVOID",30:"LLAVIZQ",31:"LLAVDER",32:"RMAIN",34:"RMIENTRAS",37:"RDO",38:"RIF",40:"RPARA",42:"MAS",43:"MENOSS",44:"MENOS",45:"RSWITCH",48:"RCASE",49:"DOSPTS",50:"RDEFAULT",51:"RRETURN",52:"RCONTINUE",54:"RBREAK",56:"RELSE",58:"MAYQUE",59:"MENQUE",60:"MAYIGQUE",61:"MENIGQUE",62:"DOBLEIG",63:"NOIG",64:"NOT",65:"AND",66:"OR",68:"COMA",70:"CADENA",71:"HTML",72:"POR",73:"DIVIDIDO",74:"ENTERO",75:"DECIMAL"},
productions_: [0,[3,2],[6,2],[6,1],[6,1],[7,5],[7,1],[7,1],[4,2],[4,1],[15,1],[15,1],[15,1],[15,1],[19,2],[19,1],[13,3],[13,3],[13,3],[13,3],[13,3],[13,4],[16,8],[16,7],[16,7],[16,6],[18,7],[18,6],[17,9],[17,8],[17,8],[17,7],[17,9],[17,8],[17,8],[17,7],[17,9],[17,8],[17,8],[17,7],[17,9],[17,8],[17,8],[17,7],[17,9],[17,8],[17,8],[17,7],[14,7],[14,8],[14,6],[14,9],[14,8],[14,7],[14,8],[14,6],[14,16],[14,16],[14,7],[46,2],[46,1],[47,4],[47,3],[47,5],[47,4],[33,2],[33,2],[33,3],[36,1],[36,1],[53,2],[39,2],[39,1],[39,4],[39,3],[55,8],[55,7],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,2],[35,3],[35,3],[35,1],[67,3],[67,1],[21,1],[21,3],[10,3],[10,1],[69,1],[69,1],[69,1],[41,2],[41,3],[41,3],[41,3],[41,1],[41,1],[41,3],[41,1],[29,3],[29,1],[29,1],[76,2],[76,2],[76,2],[76,2],[76,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		
		
		var todo = {t:$$[$0-1], Vid:idS,VHtml: htmlS,errores:errorT};
				return todo;
		
break;
case 2:
 this.$=$$[$0-1]+"\n\n"+$$[$0]
break;
case 3: case 9: case 10: case 11: case 12: case 15:
this.$=$$[$0];
break;
case 4:
 
		console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
		errorT+='Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column;
		
break;
case 5:
 this.$="Print("+$$[$0-2]+")\n";  
break;
case 6: case 7: case 13: case 88: case 89:
 this.$= $$[$0];
break;
case 8:
this.$=$$[$0-1]+"\n\n"+$$[$0];  
break;
case 14:
this.$=$$[$0-1]+"\n\n"+$$[$0];
break;
case 16:
 this.$=" \n var "+$$[$0-1]; idS+= " \n int/"+$$[$0-1]+"/"+this._$.first_line;   	
break;
case 17:
 this.$=" \n var "+$$[$0-1]; idS+= " \n string/"+$$[$0-1]+"/"+this._$.first_line; 	
break;
case 18:
 this.$=" \n var "+$$[$0-1]; idS+= " \n bool/"+$$[$0-1]+"/"+this._$.first_line;   	
break;
case 19:
 this.$=" \n var "+$$[$0-1]; idS+= " \n char/"+$$[$0-1]+"/"+this._$.first_line;  	
break;
case 20:
 this.$=" \n var "+$$[$0-1]; idS+= " \n double/"+$$[$0-1]+"/"+this._$.first_line; 	
break;
case 21:
 this.$ =$$[$0-3]+"="+$$[$0-1];console.log(this.$); 
break;
case 22:
this.$ = "def "+$$[$0-6]+"("+$$[$0-4]+"){\n\n 	"+$$[$0-1]+"\n\n}";
break;
case 23:
this.$ = "def "+$$[$0-5]+"(){\n 	"+$$[$0-1]+"\n}";
break;
case 24:
this.$ = "def "+$$[$0-5]+"("+$$[$0-3]+"){\n\n }";
break;
case 25:
this.$ = "def "+$$[$0-4]+"(){\n\n }";
break;
case 26:
this.$="def main( ): {\n"+$$[$0-1]+"if name = \" main \": \n 	main()"; 
break;
case 27:
this.$="def main( ): {\n if name = \" main \": \n 	main()"; 
break;
case 28: case 32: case 36: case 40: case 44:
this.$ = "\ndef "+$$[$0-7]+"("+$$[$0-5]+"){\n\n 	"+$$[$0-2]+"\n"+$$[$0-1]+"\n}\n";
break;
case 29: case 33: case 37: case 41: case 45:
this.$ = "\ndef "+$$[$0-6]+"(){\n 	"+$$[$0-2]+"\n"+$$[$0-1]+"\n}\n";
break;
case 30: case 34: case 38: case 42: case 46:
this.$ = "\ndef "+$$[$0-6]+"("+$$[$0-4]+"){\n\n "+$$[$0-1]+"\n}\n";
break;
case 31: case 35: case 39: case 43: case 47:
this.$ = "\ndef "+$$[$0-5]+"(){\n\n  "+$$[$0-1]+"\n}\n";
break;
case 48:
 this.$="\n while "+$$[$0-4]+": \n	"+$$[$0-1]  ;  
break;
case 49:
 this.$="\n while "+$$[$0-5]+": \n	"+$$[$0-2]+ "\n	"+$$[$0-1]  ;  
break;
case 50:
 this.$="\n while "+$$[$0-3]+": \n"  ;  
break;
case 51:
 this.$="\n while true:  \n	"+$$[$0-6]+"\n if("+$$[$0-2]+"):\n 	break\n"  ;  
break;
case 52:
 this.$="\n while true:  "+"\n if("+$$[$0-2]+"):\n break\n"  ; 
break;
case 53:
 this.$="\n if "+$$[$0-4]+": \n	"+$$[$0-1]; 
break;
case 54:
 this.$="\n if "+$$[$0-5]+": \n	"+$$[$0-2] +"\n"+$$[$0] ; 
break;
case 55:
 this.$="\n if "+$$[$0-3]+": \n"; ;
break;
case 56:
 this.$ = "\nfor "+$$[$0-12]+ " in range("+$$[$0-10]+","+atri+"): \n	"+$$[$0-1]+"\n"; 
break;
case 57:
 this.$ = "\nfor "+$$[$0-12]+ " in range("+$$[$0-10]+","+atri+"): \n	"+$$[$0-1]+"\n";  
break;
case 58:
this.$ = "\ndef switch(case,"+$$[$0-4]+"): \n  switcher = {\n	"+$$[$0-1]+"	}\n"; 
break;
case 59:
 this.$ = $$[$0-1]+"\n	"+$$[$0];
break;
case 60: case 92:
this.$ = $$[$0]; 
break;
case 61: case 62:
 this.$ = $$[$0-2]+":\n	"+$$[$0]+",\n"; 
break;
case 63:
 this.$ = $$[$0-3]+":\n	"+$$[$0-1]+",\n"; 
break;
case 64:
 this.$ = $$[$0-3]+":\n 	"+$$[$0-1]+",\n "; 
break;
case 65: case 66:
this.$=$$[$0-1];
break;
case 67:
this.$=$$[$0-2]+" "+$$[$0-1];
break;
case 68: case 69:
 this.$=$$[$0];
break;
case 70:
 this.$= $$[$0-1];
break;
case 71:
 this.$ = $$[$0-1]+" \n	"+$$[$0];
break;
case 72:
 this.$ = $$[$0];
break;
case 73:
 this.$=" else: \n	"+$$[$0-1];  
break;
case 74:
 this.$=" else: \n";  
break;
case 75:
 this.$=" elif:"+$$[$0-4]+": \n	"+$$[$0-1] ;  
break;
case 76:
 this.$=" elif: "+$$[$0-3]+": \n" ; 
break;
case 77:
 atri=$$[$0]; this.$ = $$[$0-2]+">"+$$[$0]; 
break;
case 78:
 atri=$$[$0]; this.$ = $$[$0-2]+"<"+$$[$0]; 
break;
case 79:
 atri=$$[$0]; this.$ = $$[$0-2]+">="+$$[$0]; 
break;
case 80:
 atri=$$[$0]; this.$ = $$[$0-2]+"<="+$$[$0]; 
break;
case 81:
 atri=$$[$0]; this.$ = $$[$0-2]+"=="+$$[$0]; 
break;
case 82:
 atri=$$[$0]; this.$ = $$[$0-2]+"!="+$$[$0]; 
break;
case 83:
 atri=$$[$0]; this.$ = " NOT "+$$[$0]; 
break;
case 84:
 this.$ = $$[$0-2]+" AND "+$$[$0]; 
break;
case 85:
 this.$ = $$[$0-2]+" OR "+$$[$0]; 
break;
case 86: case 93: case 95: case 100: case 101: case 103:
 this.$ = $$[$0]; 
break;
case 87:
 this.$= $$[$0-2]+","+$$[$0]; 
break;
case 90:
 this.$ = $$[$0-2]+"="+$$[$0];
break;
case 91:
 this.$ = $$[$0-2]+"+"+$$[$0];
break;
case 94:
 htmlS+=$$[$0]; this.$ = $$[$0]; 
break;
case 96:
 this.$ = ""+$$[$0]; 
break;
case 97:
 this.$ = $$[$0-2] +"-"+ $$[$0]; 
break;
case 98:
 this.$ = $$[$0-2] +"*"+ $$[$0]; 
break;
case 99:
 this.$ = $$[$0-2] +"/"+ $$[$0]; 
break;
case 102:
 this.$ = "("+$$[$0-1]+")"; 
break;
case 104:
 this.$ = $$[$0-2]+","+$$[$0];
break;
case 105: case 106:
 this.$= $$[$0]; 
break;
case 107: case 108: case 109: case 110: case 111:
 this.$= $$[$0-1]+" "+$$[$0];
break;
}
},
table: [{3:1,4:2,13:7,15:3,16:4,17:5,18:6,20:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,28:$V6},{1:[3]},{5:[1,15],13:7,15:16,16:4,17:5,18:6,20:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,28:$V6},o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),o($V7,[2,13]),{26:[1,17],32:[1,18]},{21:20,26:[1,19],67:21},{21:23,26:[1,22],67:21},{21:25,26:[1,24],67:21},{21:27,26:[1,26],67:21},{21:29,26:[1,28],67:21},{27:[1,30]},{1:[2,1]},o($V7,[2,8]),{9:[1,31]},{9:[1,32]},o($V8,$V9,{9:[1,33]}),{12:[1,34],27:$Va,68:$Vb},o($V8,[2,89]),o($V8,$V9,{9:[1,37]}),{12:[1,38],27:$Va,68:$Vb},o($V8,$V9,{9:[1,39]}),{12:[1,40],27:$Va,68:$Vb},o($V8,$V9,{9:[1,41]}),{12:[1,42],27:$Va,68:$Vb},o($V8,$V9,{9:[1,43]}),{12:[1,44],27:$Va,68:$Vb},{9:$Vc,10:45,26:$Vd,41:49,44:$Ve,69:46,70:$Vf,71:$Vg,74:$Vh,75:$Vi},{11:[1,56],20:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,29:55,76:57},{11:[1,64]},{11:[1,66],20:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,29:65,76:57},o($Vp,[2,16]),{9:$Vc,10:67,26:$Vd,41:49,44:$Ve,69:46,70:$Vf,71:$Vg,74:$Vh,75:$Vi},{26:[1,68]},{11:[1,70],20:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,29:69,76:57},o($Vp,[2,17]),{11:[1,72],20:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,29:71,76:57},o($Vp,[2,19]),{11:[1,74],20:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,29:73,76:57},o($Vp,[2,18]),{11:[1,76],20:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,29:75,76:57},o($Vp,[2,20]),{12:[1,77],42:$Vq},o($Vr,[2,92]),o($Vr,[2,93]),o($Vr,[2,94]),o($Vr,[2,95],{44:$Vs,72:$Vt,73:$Vu}),{9:$Vc,26:$Vd,41:82,44:$Ve,74:$Vh,75:$Vi},o($Vv,[2,100]),o($Vv,[2,101]),{9:$Vc,26:$Vd,41:83,44:$Ve,74:$Vh,75:$Vi},o($Vv,[2,103]),{11:[1,84],68:$Vw},{30:[1,86]},o($Vx,[2,105]),o($Vx,[2,106]),{26:[1,87]},{26:[1,88]},{26:[1,89]},{26:[1,90]},{26:[1,91]},{30:[1,92]},{11:[1,93],68:$Vw},{30:[1,94]},o($V8,[2,90],{42:$Vq}),o($V8,[2,87]),{11:[1,95],68:$Vw},{30:[1,96]},{11:[1,97],68:$Vw},{30:[1,98]},{11:[1,99],68:$Vw},{30:[1,100]},{11:[1,101],68:$Vw},{30:[1,102]},o($Vp,[2,21]),{9:$Vc,26:$Vd,41:49,44:$Ve,69:103,70:$Vf,71:$Vg,74:$Vh,75:$Vi},{9:$Vc,26:$Vd,41:104,44:$Ve,74:$Vh,75:$Vi},{9:$Vc,26:$Vd,41:105,44:$Ve,74:$Vh,75:$Vi},{9:$Vc,26:$Vd,41:106,44:$Ve,74:$Vh,75:$Vi},o($Vv,[2,96]),{11:[1,107],44:$Vs,72:$Vt,73:$Vu},{30:[1,108]},{20:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,76:109},{2:$Vy,6:110,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,111],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},o($Vx,[2,107]),o($Vx,[2,108]),o($Vx,[2,109]),o($Vx,[2,110]),o($Vx,[2,111]),{2:$Vy,6:127,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,128],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},{30:[1,129]},{2:$Vy,6:130,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:131,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{30:[1,134]},{2:$Vy,6:135,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:136,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{30:[1,137]},{2:$Vy,6:138,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:139,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{30:[1,140]},{2:$Vy,6:141,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:142,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{30:[1,143]},{2:$Vy,6:144,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:145,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},o($Vr,[2,91]),o([11,12,27,42,44,49,58,59,60,61,62,63,65,66,68],[2,97],{72:$Vt,73:$Vu}),o($Vv,[2,98]),o($Vv,[2,99]),o($Vv,[2,102]),{2:$Vy,6:146,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,147],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},o($Vx,[2,104]),{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,148],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},o($V7,[2,25]),o($VM,[2,3]),o($VM,[2,4]),{9:[1,150]},o($VM,[2,6]),o($VM,[2,7]),{21:20,26:$VN,67:21},{21:23,26:$VN,67:21},{21:27,26:$VN,67:21},{21:25,26:$VN,67:21},{21:29,26:$VN,67:21},{9:[1,152]},{30:[1,153]},{9:[1,154]},{9:[1,155]},{9:[1,156]},{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,157],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},o($V7,[2,27]),{2:$Vy,6:158,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:159,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:160,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{31:[1,161]},{9:$Vc,10:163,12:[1,162],26:$Vd,41:49,44:$Ve,69:46,70:$Vf,71:$Vg,74:$Vh,75:$Vi},{12:[1,164]},{2:$Vy,6:165,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:166,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:167,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{31:[1,168]},{2:$Vy,6:169,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:170,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:171,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{31:[1,172]},{2:$Vy,6:173,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:174,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:175,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{31:[1,176]},{2:$Vy,6:177,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:178,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:179,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{31:[1,180]},{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,181],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},o($V7,[2,24]),o($V7,[2,23]),o($VM,[2,2]),{9:$Vc,10:182,26:$Vd,41:49,44:$Ve,69:46,70:$Vf,71:$Vg,74:$Vh,75:$Vi},o($V8,$V9),{9:$Vc,26:$Vd,35:183,41:185,44:$Ve,57:184,64:$VO,74:$Vh,75:$Vi},{2:$Vy,6:187,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,188],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},{9:$Vc,26:$Vd,35:189,41:185,44:$Ve,57:184,64:$VO,74:$Vh,75:$Vi},{20:[1,190]},{9:$Vc,26:$Vd,41:191,44:$Ve,74:$Vh,75:$Vi},o($V7,[2,26]),{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:192,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{31:[1,193]},{31:[1,194]},o($V7,[2,31]),o($VP,[2,65]),{12:[1,195],42:$Vq},o($VP,[2,66]),{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:196,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{31:[1,197]},{31:[1,198]},o($V7,[2,35]),{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:199,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{31:[1,200]},{31:[1,201]},o($V7,[2,39]),{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:202,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{31:[1,203]},{31:[1,204]},o($V7,[2,43]),{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,33:205,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL},{31:[1,206]},{31:[1,207]},o($V7,[2,47]),o($V7,[2,22]),{11:[1,208],42:$Vq},{11:[1,209]},o($VQ,[2,86],{65:[1,210],66:[1,211]}),{44:$Vs,58:[1,212],59:[1,213],60:[1,214],61:[1,215],62:[1,216],63:[1,217],72:$Vt,73:$Vu},{9:$Vc,26:$Vd,41:218,44:$Ve,74:$Vh,75:$Vi},{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,219],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},{34:[1,220]},{11:[1,221]},{26:[1,222]},{11:[1,223],44:$Vs,72:$Vt,73:$Vu},{31:[1,224]},o($V7,[2,30]),o($V7,[2,29]),o($VP,[2,67]),{31:[1,225]},o($V7,[2,34]),o($V7,[2,33]),{31:[1,226]},o($V7,[2,38]),o($V7,[2,37]),{31:[1,227]},o($V7,[2,42]),o($V7,[2,41]),{31:[1,228]},o($V7,[2,46]),o($V7,[2,45]),{12:[1,229]},{30:[1,230]},{9:$Vc,26:$Vd,41:185,44:$Ve,57:231,64:$VO,74:$Vh,75:$Vi},{9:$Vc,26:$Vd,41:185,44:$Ve,57:232,64:$VO,74:$Vh,75:$Vi},{9:$Vc,26:$Vd,41:233,44:$Ve,74:$Vh,75:$Vi},{9:$Vc,26:$Vd,41:234,44:$Ve,74:$Vh,75:$Vi},{9:$Vc,26:$Vd,41:235,44:$Ve,74:$Vh,75:$Vi},{9:$Vc,26:$Vd,41:236,44:$Ve,74:$Vh,75:$Vi},{9:$Vc,26:$Vd,41:237,44:$Ve,74:$Vh,75:$Vi},{9:$Vc,26:$Vd,41:238,44:$Ve,74:$Vh,75:$Vi},o($VR,[2,83],{44:$Vs,72:$Vt,73:$Vu}),{34:[1,239]},{9:[1,240]},{30:[1,241]},{27:[1,242]},{30:[1,243]},o($V7,[2,28]),o($V7,[2,32]),o($V7,[2,36]),o($V7,[2,40]),o($V7,[2,44]),o($VM,[2,5]),{2:$Vy,6:244,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,245],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},o($VQ,[2,84]),o($VQ,[2,85]),o($VR,[2,77],{44:$Vs,72:$Vt,73:$Vu}),o($VR,[2,78],{44:$Vs,72:$Vt,73:$Vu}),o($VR,[2,79],{44:$Vs,72:$Vt,73:$Vu}),o($VR,[2,80],{44:$Vs,72:$Vt,73:$Vu}),o($VR,[2,81],{44:$Vs,72:$Vt,73:$Vu}),o($VR,[2,82],{44:$Vs,72:$Vt,73:$Vu}),{9:[1,246]},{9:$Vc,26:$Vd,35:247,41:185,44:$Ve,57:184,64:$VO,74:$Vh,75:$Vi},{2:$Vy,6:248,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,249],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},{9:$Vc,26:$Vd,41:250,44:$Ve,74:$Vh,75:$Vi},{46:251,47:252,48:$VS,50:$VT},{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,255],33:257,34:$VF,36:256,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL,53:258,54:$VU},o($VM,[2,50]),{9:$Vc,26:$Vd,35:260,41:185,44:$Ve,57:184,64:$VO,74:$Vh,75:$Vi},{11:[1,261]},{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,262],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},o($VM,[2,55]),{12:[1,263],44:$Vs,72:$Vt,73:$Vu},{31:[1,264],47:265,48:$VS,50:$VT},o($VP,[2,60]),{9:$Vc,26:$Vd,41:266,44:$Ve,74:$Vh,75:$Vi},{49:[1,267]},o($VM,[2,48]),{31:[1,268]},o($VP,[2,68]),o($VP,[2,69]),{12:[1,269]},{11:[1,270]},{12:[1,271]},o($VM,[2,53],{39:272,55:273,56:[1,274]}),{9:$Vc,26:$Vd,35:275,41:185,44:$Ve,57:184,64:$VO,74:$Vh,75:$Vi},o($VM,[2,58]),o($VP,[2,59]),{44:$Vs,49:[1,276],72:$Vt,73:$Vu},{2:$Vy,6:277,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},o($VM,[2,49]),o($VP,[2,70]),{12:[1,278]},o($VM,[2,52]),o($VM,[2,54],{55:279,56:[1,280]}),o($VV,[2,72]),{30:[1,281],38:$VW},{12:[1,283]},{2:$Vy,6:284,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},o($VP,[2,62],{13:115,14:116,7:149,33:257,53:258,36:285,8:$Vz,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL,54:$VU}),o($VM,[2,51]),o($VV,[2,71]),{38:$VW},{2:$Vy,6:286,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,287],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},{9:[1,288]},{26:[1,289]},o($VP,[2,61],{13:115,14:116,7:149,33:257,53:258,36:290,8:$Vz,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ,51:$VK,52:$VL,54:$VU}),o($VP,[2,64]),{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,291],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},o($VV,[2,74]),{9:$Vc,26:$Vd,35:292,41:185,44:$Ve,57:184,64:$VO,74:$Vh,75:$Vi},{42:[1,293],43:[1,294]},o($VP,[2,63]),o($VV,[2,73]),{11:[1,295]},{42:[1,296]},{44:[1,297]},{30:[1,298]},{11:[1,299]},{11:[1,300]},{2:$Vy,6:301,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,302],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},{30:[1,303]},{30:[1,304]},{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,305],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},o($VV,[2,76]),{2:$Vy,6:306,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},{2:$Vy,6:307,7:112,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},o($VV,[2,75]),{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,308],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},{7:149,8:$Vz,13:115,14:116,20:$VA,22:$VB,23:$VC,24:$VD,25:$VE,26:$V5,31:[1,309],34:$VF,37:$VG,38:$VH,40:$VI,45:$VJ},o($VM,[2,56]),o($VM,[2,57])],
defaultActions: {15:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var htmlS ="";
	var traductor= "";
	var idS = "";
	var primi="";
	var errorT = "";
	
	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 8;
break;
case 4:return 20;
break;
case 5:return 22;
break;
case 6:return 25;
break;
case 7:return 23;
break;
case 8:return 24;
break;
case 9:return 34;
break;
case 10:return 37;
break;
case 11:return 38;
break;
case 12:return 56;
break;
case 13:return 40;
break;
case 14:return 45;
break;
case 15:return 48;
break;
case 16:return 50;
break;
case 17:return 54;
break;
case 18:return 52;
break;
case 19:return 51;
break;
case 20:return 28;
break;
case 21:return 32;
break;
case 22:return 49;
break;
case 23:return 12;
break;
case 24:return 30;
break;
case 25:return 31;
break;
case 26:return 9;
break;
case 27:return 11;
break;
case 28:return 'O_MAS';
break;
case 29:return 'O_MENOS';
break;
case 30:return 'O_POR';
break;
case 31:return 'O_DIVIDIDO';
break;
case 32:return 65
break;
case 33:return 66;
break;
case 34:return 42;
break;
case 35:return 44;
break;
case 36:return 72;
break;
case 37:return 73;
break;
case 38:return 'CONCAT';
break;
case 39:return 61;
break;
case 40:return 60;
break;
case 41:return 62;
break;
case 42:return 63;
break;
case 43:return 59;
break;
case 44:return 58;
break;
case 45:return 27;
break;
case 46:return 64;
break;
case 47:return 68;
break;
case 48: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 70; 
break;
case 49: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 71; 
break;
case 50:return 75;
break;
case 51:return 74;
break;
case 52:return 26;
break;
case 53:return 5;
break;
case 54: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:console\.write\b)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!)/i,/^(?:,)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}