/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorJS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,3],$V2=[1,5],$V3=[2,5,8],$V4=[1,22],$V5=[1,19],$V6=[1,21],$V7=[1,25],$V8=[1,23],$V9=[1,24],$Va=[1,26],$Vb=[1,27],$Vc=[1,32],$Vd=[1,29],$Ve=[1,31],$Vf=[1,40],$Vg=[1,39],$Vh=[2,10],$Vi=[2,34],$Vj=[1,42],$Vk=[1,43],$Vl=[2,53],$Vm=[1,57],$Vn=[1,58],$Vo=[2,5,7,26,34,35,36,37],$Vp=[1,80],$Vq=[1,81],$Vr=[1,73],$Vs=[1,74],$Vt=[1,76],$Vu=[1,77],$Vv=[1,78],$Vw=[1,82],$Vx=[1,83],$Vy=[1,84],$Vz=[2,5,7,10,20,26,34,35,36,37,39,41,42,44,46,48,50,57,59,60,62,63,66,81,82,85,86],$VA=[1,90],$VB=[2,26],$VC=[22,30,33],$VD=[2,83],$VE=[1,98],$VF=[1,99],$VG=[1,100],$VH=[1,101],$VI=[1,102],$VJ=[1,103],$VK=[1,104],$VL=[1,105],$VM=[1,106],$VN=[1,107],$VO=[1,108],$VP=[1,109],$VQ=[1,110],$VR=[1,111],$VS=[1,112],$VT=[22,30,33,57,59,68,69,70,71,72,73,74,75,76,77,78,79,80],$VU=[2,89],$VV=[22,30],$VW=[2,28],$VX=[1,151],$VY=[2,91],$VZ=[1,156],$V_=[1,171],$V$=[1,170],$V01=[1,161],$V11=[1,162],$V21=[1,163],$V31=[1,164],$V41=[1,166],$V51=[1,167],$V61=[1,168],$V71=[1,169],$V81=[1,172],$V91=[1,173],$Va1=[2,7,10,26,34,35,36,37,39,41,42,44,46,48,50,85,86],$Vb1=[2,104],$Vc1=[1,264];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"start":3,"lista":4,"r_public":5,"principal":6,"l_cerrar":7,"EOF":8,"r_class":9,"r_id":10,"l_abrir":11,"lmetodos":12,"r_interface":13,"lmetodosdefiniciones":14,"metodosdefiniciones":15,"ltipos":16,"declaracion":17,"recmetodos":18,"r_void":19,"p_abrir":20,"lparametros":21,"r_puntocoma":22,"metodos":23,"r_static":24,"r_main":25,"r_string":26,"c_abrir":27,"c_cerrar":28,"r_args":29,"p_cerrar":30,"linstrucciones":31,"parametros":32,"r_coma":33,"r_int":34,"r_double":35,"r_char":36,"r_bool":37,"seleccionid":38,"r_return":39,"lreturn":40,"r_continue":41,"r_break":42,"prints":43,"r_if":44,"mif":45,"r_for":46,"mfor":47,"r_while":48,"mwhile":49,"r_do":50,"mdo":51,"reclinstrucciones":52,"ldeclaracion":53,"r_igual":54,"lexpresion":55,"mdeclaracion":56,"r_mas":57,"expresion":58,"r_menos":59,"r_numero":60,"operacion":61,"r_cadena":62,"r_caracter":63,"booleano":64,"emetodo":65,"r_not":66,"recexpresion":67,"r_asterisco":68,"r_diagonal":69,"r_masmas":70,"r_menosmenos":71,"r_menor":72,"r_mayor":73,"r_mayorigual":74,"r_menorigual":75,"r_igualigual":76,"r_notigual":77,"r_and":78,"r_or":79,"r_xor":80,"r_true":81,"r_false":82,"lvalores":83,"valores":84,"r_fprint":85,"r_fprintln":86,"lif":87,"r_else":88,"melse":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"r_public",7:"l_cerrar",8:"EOF",9:"r_class",10:"r_id",11:"l_abrir",13:"r_interface",19:"r_void",20:"p_abrir",22:"r_puntocoma",24:"r_static",25:"r_main",26:"r_string",27:"c_abrir",28:"c_cerrar",29:"r_args",30:"p_cerrar",33:"r_coma",34:"r_int",35:"r_double",36:"r_char",37:"r_bool",39:"r_return",41:"r_continue",42:"r_break",44:"r_if",46:"r_for",48:"r_while",50:"r_do",54:"r_igual",57:"r_mas",59:"r_menos",60:"r_numero",62:"r_cadena",63:"r_caracter",66:"r_not",68:"r_asterisco",69:"r_diagonal",70:"r_masmas",71:"r_menosmenos",72:"r_menor",73:"r_mayor",74:"r_mayorigual",75:"r_menorigual",76:"r_igualigual",77:"r_notigual",78:"r_and",79:"r_or",80:"r_xor",81:"r_true",82:"r_false",85:"r_fprint",86:"r_fprintln",88:"r_else"},
productions_: [0,[3,1],[4,3],[4,3],[4,1],[6,4],[6,4],[6,2],[14,3],[14,3],[14,1],[14,3],[15,5],[15,5],[15,2],[12,3],[12,3],[12,1],[12,3],[18,1],[18,1],[23,11],[23,7],[23,7],[23,2],[21,3],[21,0],[32,4],[32,0],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,3],[31,3],[31,1],[31,2],[52,1],[52,2],[17,3],[17,2],[53,3],[53,3],[53,0],[56,3],[56,0],[55,2],[55,2],[55,1],[58,2],[58,2],[58,2],[58,2],[58,3],[58,4],[58,2],[67,1],[67,1],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,0],[64,1],[64,1],[65,3],[65,0],[83,2],[83,0],[84,3],[84,0],[38,4],[38,3],[38,2],[38,2],[38,2],[40,2],[40,1],[43,5],[43,5],[45,7],[45,2],[87,2],[87,0],[89,8],[89,4],[89,2],[47,11],[47,2],[49,7],[49,2],[51,9],[51,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	this.$ =  new nodo("","start");
	this.$.pushHijo($$[$0]);
	raizA = this.$;
	var data = {
		raiz:raizA,
		lexicoB: tokensBuenos,
		lexicoM: tokensMalos,
		sintacticoB: sintacticoBuenos,
		sintacticoM: sintacticoMalos
	};
	tokensBuenos = [];
	tokensMalos = [];
	sintacticoBuenos = [];
	sintacticoMalos = [];
	return data;

break;
case 2:

	this.$ = new nodo("","lista");
	this.$.pushHijo("","r_public");
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 3:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

            this.$ = new nodo("","lista");
			this.$.pushHijo("","Error");
			this.$.pushHijo($$[$0]);
			sintacticoMalos.push(new errorSintactico($$[$0-2],"error en lista",this._$.first_line,this._$.first_column));
	
break;
case 4:

		this.$ = new nodo("","lista");
	
break;
case 5:

	this.$ = new nodo("","principal");
	this.$.pushHijo(new nodo("class","r_class"));
	this.$.pushHijo(new nodo($$[$0-2],"r_id"));
	this.$.pushHijo(new nodo($$[$0-1],"l_abrir"));
	this.$.pushHijo($$[$0]);

break;
case 6:

		this.$ = new nodo("","principal");
		this.$.pushHijo( new nodo( "", "r_interface"));
		this.$.pushHijo(new nodo("","r_id"));
		this.$.pushHijo(new nodo("","l_abrir"));
		this.$.pushHijo($$[$0]);
	
break;
case 7:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

            this.$ = new nodo("","principal");
			this.$.pushHijo("","Error");
			sintacticoMalos.push(new errorSintactico($$[$0-1],"error en principal",this._$.first_line,this._$.first_column));
	
break;
case 8:

	this.$ = new nodo("","lmetodosdefiniciones");
	this.$.pushHijo(new nodo("","r_public"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 9:

	this.$ = new nodo("","lmetodosdefiniciones");
	this.$.pushHijo($$[$0-2]);
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 10:

		this.$ = new nodo("","lmetodosdefiniciones");
		this.$.pushHijo(new nodo($$[$0],"l_cerrar"));

break;
case 11:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

            this.$ = new nodo("","lmetodosdefiniciones");
			this.$.pushHijo("","Error");
			this.$.pushHijo($$[$0]);
			sintacticoMalos.push(new errorSintactico($$[$0-2],"error en lmetodosdefiniciones",this._$.first_line,this._$.first_column));
	
break;
case 12:

	this.$ = new nodo("","metodosdefiniciones");
	this.$.pushHijo(new nodo("","r_void"));
	this.$.pushHijo(new nodo("","r_id"));
	this.$.pushHijo(new nodo("","p_abrir"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo(new nodo("","r_puntocoma"));

break;
case 13:

	this.$ = new nodo("","metodosdefiniciones");
	this.$.pushHijo($$[$0-4]);
	this.$.pushHijo(new nodo("","r_id"));
	this.$.pushHijo(new nodo("","p_abrir"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo(new nodo("","r_puntocoma"));

break;
case 14:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

            this.$ = new nodo("","metodosdefiniciones");
			this.$.pushHijo("","Error");
			sintacticoMalos.push(new errorSintactico($$[$0-1],"error en metodosdefiniciones",this._$.first_line,this._$.first_column));
	
break;
case 15:

	this.$ = new nodo("","lmetodos");
	this.$.pushHijo(new nodo("","r_public"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 16:

		this.$ = new nodo("","lmetodos");
		this.$.pushHijo($$[$0-2]);
		this.$.pushHijo($$[$0-1]);
		this.$.pushHijo($$[$0]);
		console.log("entro a tipos");
	
break;
case 17:

		this.$ = new nodo("","lmetodos");
		this.$.pushHijo(new nodo($$[$0],"l_cerrar"));
	
break;
case 18:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

            this.$ = new nodo("","lmetodos");
			this.$.pushHijo("","Error");
			this.$.pushHijo($$[$0]);
			sintacticoMalos.push(new errorSintactico($$[$0-2],"error en lmetodos",this._$.first_line,this._$.first_column));
	
break;
case 19: case 20:
this.$ = new nodo("","recmetodos");
break;
case 21:

	this.$ = new nodo("","metodos");
	this.$.pushHijo(new nodo("","r_static"));
	this.$.pushHijo(new nodo("function","r_void"));
	this.$.pushHijo(new nodo("main","r_main"));
	this.$.pushHijo(new nodo($$[$0-7],"p_abrir"));
	this.$.pushHijo(new nodo("","r_string"));
	this.$.pushHijo(new nodo("","c_abrir"));
	this.$.pushHijo(new nodo("","c_cerrar"));
	this.$.pushHijo(new nodo("","r_args"));
	this.$.pushHijo(new nodo($$[$0-2],"p_cerrar"));
	this.$.pushHijo(new nodo($$[$0-1],"l_abrir"));
	this.$.pushHijo($$[$0]);

break;
case 22:

		this.$ = new nodo("","metodos");
		this.$.pushHijo(new nodo("function","r_void"));
		this.$.pushHijo(new nodo($$[$0-5],"r_id"));
		this.$.pushHijo(new nodo($$[$0-4],"p_abrir"));
		this.$.pushHijo($$[$0-3]);
		this.$.pushHijo(new nodo($$[$0-2],"p_cerrar"));
		this.$.pushHijo(new nodo($$[$0-1],"l_abrir"));
		this.$.pushHijo($$[$0]);
	
break;
case 23:

		this.$ = new nodo("","metodos");
		this.$.pushHijo($$[$0-6]);
		this.$.nodos[0].nodos[0].tTraducido = "function";
		this.$.pushHijo(new nodo($$[$0-5],"r_id"));
		this.$.pushHijo(new nodo($$[$0-4],"p_abrir"));
		this.$.pushHijo($$[$0-3]);
		this.$.pushHijo(new nodo($$[$0-2],"p_cerrar"));
		this.$.pushHijo(new nodo($$[$0-1],"l_abrir"));
		this.$.pushHijo($$[$0]);
	
break;
case 24:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

            this.$ = new nodo("","metodos");
			this.$.pushHijo("","Error");
			sintacticoMalos.push(new errorSintactico($$[$0-1],"error en metodos",this._$.first_line,this._$.first_column));
	
break;
case 25:

	this.$ = new nodo("","lparametros");
	this.$.pushHijo($$[$0-2]);
	this.$.nodos[0].nodos[0].tTraducido = "";
	this.$.pushHijo(new nodo($$[$0-1],"r_id"));
	this.$.pushHijo($$[$0]);

break;
case 26:

		this.$ = new nodo("","lparametros");
	
break;
case 27:

	this.$ = new nodo("","parametros");
	this.$.pushHijo(new nodo($$[$0-3],"r_coma"));
	this.$.pushHijo($$[$0-2]);
	this.$.nodos[1].tTraducido = "";
	this.$.pushHijo(new nodo($$[$0-1],"r_id"));
	this.$.pushHijo($$[$0]);


break;
case 28:

		this.$ = new nodo("","parametros");
	
break;
case 29:

		this.$ = new nodo("","ltipos");
		this.$.pushHijo(new nodo("var ","r_int"));
		console.log("es int");


break;
case 30:

		this.$ = new nodo("","ltipos");
		this.$.pushHijo(new nodo("var ","r_double"));


break;
case 31:

		this.$ = new nodo("","ltipos");
		this.$.pushHijo(new nodo("var ","r_string"));


break;
case 32:

		this.$ = new nodo("","ltipos");
		this.$.pushHijo(new nodo("var ","r_char"));


break;
case 33:

		this.$ = new nodo("","ltipos");
		this.$.pushHijo(new nodo("var ","r_bool"));


break;
case 34:
 //podria ser l_cerrar
		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

            this.$ = new nodo("","ltipos");
			this.$.pushHijo("","Error");
			sintacticoMalos.push(new errorSintactico($$[$0],"error en ltipos",this._$.first_line,this._$.first_column));
	
break;
case 35:

	this.$ = new nodo("","linstrucciones");
	this.$.pushHijo($$[$0-2]);
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 36:

	this.$ = new nodo("","linstrucciones");
	this.$.pushHijo(new nodo($$[$0-2],"r_id"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 37:

	this.$ = new nodo("","linstrucciones");
	this.$.pushHijo(new nodo($$[$0-2],"r_return"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 38:

	this.$ = new nodo("","linstrucciones");
	this.$.pushHijo(new nodo($$[$0-2],"r_continue"));
	this.$.pushHijo(new nodo("\n","r_puntocoma"));
	this.$.pushHijo($$[$0]);

break;
case 39:

	this.$ = new nodo("","linstrucciones");
	this.$.pushHijo(new nodo($$[$0-2],"r_break"));
	this.$.pushHijo(new nodo("\n","r_puntocoma"));
	this.$.pushHijo($$[$0]);

break;
case 40:

	this.$ = new nodo("","linstrucciones");
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 41:

	this.$ = new nodo("","linstrucciones");
	this.$.pushHijo(new nodo($$[$0-2],"r_if"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 42:

	this.$ = new nodo("","linstrucciones");
	this.$.pushHijo(new nodo($$[$0-2],"r_for"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 43:

	this.$ = new nodo("","linstrucciones");
	this.$.pushHijo(new nodo($$[$0-2],"r_while"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 44:

	this.$ = new nodo("","linstrucciones");
	this.$.pushHijo(new nodo($$[$0-2],"r_do"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 45:

		this.$ = new nodo("","linstrucciones");
		this.$.pushHijo(new nodo($$[$0],"l_cerrar"));
	
break;
case 46:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

            this.$ = new nodo("","linstrucciones");
			this.$.pushHijo("","Error");
			this.$.pushHijo(new nodo($$[$0],"reclinstrucciones"));
			sintacticoMalos.push(new errorSintactico($$[$0-1],"error en linstrucciones",this._$.first_line,this._$.first_column));
	
break;
case 47:

	this.$ = new nodo($$[$0],"l_cerrar");

break;
case 48:

		this.$ =$$[$0];

break;
case 49:

	this.$ = new nodo("","declaracion");
	this.$.pushHijo(new nodo($$[$0-2],"r_id"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo(new nodo("\n","r_puntocoma"));

break;
case 50:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

            this.$ = new nodo("","declaracion");
			this.$.pushHijo("","Error");
			sintacticoMalos.push(new errorSintactico($$[$0-1],"error en declaracion",this._$.first_line,this._$.first_column));
	
break;
case 51:

	this.$ = new nodo("","ldeclaracion");
	this.$.pushHijo(new nodo($$[$0-2],"r_coma"));
	this.$.pushHijo(new nodo($$[$0-1],"r_id"));
	this.$.pushHijo($$[$0]);

break;
case 52:

	this.$ = new nodo("","ldeclaracion");
	this.$.pushHijo(new nodo($$[$0-2],"r_igual"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 53:
this.$ = new nodo("","ldeclaracion");
break;
case 54:

	this.$ = new nodo("","mdeclaracion");
	this.$.pushHijo(new nodo($$[$0-2],"r_coma"));
	this.$.pushHijo(new nodo($$[$0-1],"r_id"));
	this.$.pushHijo($$[$0]);

break;
case 55:
this.$ = new nodo("","mdeclaracion");
break;
case 56:

	this.$ = new nodo("","lexpresion");
	this.$.pushHijo(new nodo($$[$0-1],"r_mas"));
	this.$.pushHijo($$[$0]);

break;
case 57:

	this.$ = new nodo("","lexpresion");
	this.$.pushHijo(new nodo($$[$0-1],"r_menos"));
	this.$.pushHijo($$[$0]);

break;
case 58:

		this.$ = new nodo("","lexpresion");
		this.$.pushHijo($$[$0]);
	
break;
case 59:

	this.$ = new nodo("","expresion");
	this.$.pushHijo(new nodo($$[$0-1],"r_numero"));
	this.$.pushHijo($$[$0]);

break;
case 60:

	this.$ = new nodo("","expresion");
	this.$.pushHijo(new nodo($$[$0-1],"r_cadena"));
	this.$.pushHijo($$[$0]);

break;
case 61:

	this.$ = new nodo("","expresion");
	this.$.pushHijo(new nodo($$[$0-1],"r_caracter"));
	this.$.pushHijo($$[$0]);

break;
case 62:

	this.$ = new nodo("","expresion");
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 63:

	this.$ = new nodo("","expresion");
	this.$.pushHijo(new nodo($$[$0-2],"r_id"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 64:

	this.$ = new nodo("","expresion");
	this.$.pushHijo(new nodo($$[$0-3],"p_abrir"));
	this.$.pushHijo($$[$0-2]);
	this.$.pushHijo(new nodo($$[$0-1],"p_cerrar"));
	this.$.pushHijo($$[$0]);

break;
case 65:

	this.$ = new nodo("","expresion");
	this.$.pushHijo(new nodo($$[$0-1],"r_not"));
	this.$.pushHijo($$[$0]);
	
break;
case 66: case 67:

	this.$ = new nodo("","recexpresion");

break;
case 68:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_mas"));
	this.$.pushHijo($$[$0]);

break;
case 69:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_menos"));
	this.$.pushHijo($$[$0]);

break;
case 70:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_asterisco"));
	this.$.pushHijo($$[$0]);

break;
case 71:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_diagonal"));
	this.$.pushHijo($$[$0]);

break;
case 72:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_masmas"));
	this.$.pushHijo($$[$0]);

break;
case 73:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_menosmenos"));
	this.$.pushHijo($$[$0]);

break;
case 74:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_menor"));
	this.$.pushHijo($$[$0]);

break;
case 75:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_mayor"));
	this.$.pushHijo($$[$0]);

break;
case 76:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_mayorigual"));
	this.$.pushHijo($$[$0]);

break;
case 77:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_menorigual"));
	this.$.pushHijo($$[$0]);

break;
case 78:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_igualigual"));
	this.$.pushHijo($$[$0]);

break;
case 79:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_notigual"));
	this.$.pushHijo($$[$0]);

break;
case 80:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_and"));
	this.$.pushHijo($$[$0]);

break;
case 81:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_or"));
	this.$.pushHijo($$[$0]);

break;
case 82:

	this.$ = new nodo("","operacion");
	this.$.pushHijo(new nodo($$[$0-1],"r_xor"));
	this.$.pushHijo($$[$0]);

break;
case 83:

	this.$ = new nodo("","operacion");

break;
case 84:

	this.$ = new nodo("","booleano");
	this.$.pushHijo(new nodo($$[$0],"r_true"));

break;
case 85:

	this.$ = new nodo("","booleano");
	this.$.pushHijo(new nodo($$[$0],"r_false"));

break;
case 86:

	this.$ = new nodo("","emetodo");
	this.$.pushHijo(new nodo($$[$0-2],"p_abrir"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo(new nodo($$[$0],"p_cerrar"));

break;
case 87:

		this.$ = new nodo("","emetodo");
	
break;
case 88:

	this.$ = new nodo("","lvalores");
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 89:

		this.$ = new nodo("","lvalores");
	
break;
case 90:

	this.$ = new nodo("","valores");
	this.$.pushHijo(new nodo($$[$0-2],"r_coma"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo($$[$0]);

break;
case 91:

		this.$ = new nodo("","valores");
	
break;
case 92:

	this.$ = new nodo("","seleccionid");
	this.$.pushHijo(new nodo($$[$0-3],"p_abrir"));
	this.$.pushHijo($$[$0-2]);
	this.$.pushHijo(new nodo($$[$0-1],"p_cerrar"));
	this.$.pushHijo(new nodo("\n","r_puntocoma"));

break;
case 93:

	this.$ = new nodo("","seleccionid");
	this.$.pushHijo(new nodo($$[$0-2],"r_igual"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo(new nodo("\n","r_puntocoma"));

break;
case 94:

	this.$ = new nodo("","seleccionid");
	this.$.pushHijo(new nodo($$[$0-1],"r_masmas"));
	this.$.pushHijo(new nodo("\n","r_puntocoma"));

break;
case 95:

	this.$ = new nodo("","seleccionid");
	this.$.pushHijo(new nodo($$[$0-1],"r_menosmenos"));
	this.$.pushHijo(new nodo("\n","r_puntocoma"));

break;
case 96:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

		this.$ = new nodo("","seleccionid");
		this.$.pushHijo("","Error");
		sintacticoMalos.push(new errorSintactico($$[$0-1],"error en seleccionid",this._$.first_line,this._$.first_column));
	
break;
case 97:

	this.$ = new nodo("","lreturn");
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo(new nodo("\n","r_puntocoma"));

break;
case 98:

	this.$ = new nodo("","lreturn");
	this.$.pushHijo(new nodo("\n","r_puntocoma"));
	
break;
case 99:

	this.$ =  new nodo("","prints");
	this.$.pushHijo(new nodo("console.log","r_fprint"));
	this.$.pushHijo(new nodo($$[$0-3],"p_abrir"));
	this.$.pushHijo($$[$0-2]);
	this.$.pushHijo(new nodo($$[$0-1],"p_cerrar"));
	this.$.pushHijo(new nodo("\n","r_puntocoma"));

break;
case 100:

	this.$ =  new nodo("","prints");
	this.$.pushHijo(new nodo("console.log","r_fprintln"));
	this.$.pushHijo(new nodo($$[$0-3],"p_abrir"));
	this.$.pushHijo($$[$0-2]);
	this.$.pushHijo(new nodo($$[$0-1],"p_cerrar"));
	this.$.pushHijo(new nodo("\n","r_puntocoma"));

break;
case 101:

	this.$ = new nodo("","mif");
	this.$.pushHijo(new nodo($$[$0-6],"p_abrir"));
	this.$.pushHijo($$[$0-5]);
	this.$.pushHijo(new nodo($$[$0-4],"p_cerrar"));
	this.$.pushHijo(new nodo($$[$0-3],"l_abrir"));
	this.$.pushHijo($$[$0-2]);
	this.$.pushHijo(new nodo($$[$0-1],"l_cerrar"));
	this.$.pushHijo($$[$0]);

break;
case 102:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

		this.$ = new nodo("","mif");
		this.$.pushHijo("","Error");
		sintacticoMalos.push(new errorSintactico($$[$0-1],"error en mif",this._$.first_line,this._$.first_column));
	
break;
case 103:

	this.$ = new nodo("","lif");
	this.$.pushHijo(new nodo($$[$0-1],"r_else"));
	this.$.pushHijo($$[$0]);

break;
case 104:

	this.$ = new nodo("","lif");
	
break;
case 105:

	this.$ = new nodo("","melse");
	this.$.pushHijo(new nodo($$[$0-7],"r_if"));
	this.$.pushHijo(new nodo($$[$0-6],"p_abrir"));
	this.$.pushHijo($$[$0-5]);
	this.$.pushHijo(new nodo($$[$0-4],"p_cerrar"));
	this.$.pushHijo(new nodo($$[$0-3],"l_abrir"));
	this.$.pushHijo($$[$0-2]);
	this.$.pushHijo(new nodo($$[$0-1],"l_cerrar"));
	this.$.pushHijo($$[$0]);

break;
case 106:

		this.$ = new nodo("","melse");
		this.$.pushHijo(new nodo($$[$0-3],"l_abrir"));
		this.$.pushHijo($$[$0-2]);
		this.$.pushHijo(new nodo($$[$0-1],"l_cerrar"));
		this.$.pushHijo($$[$0]);
	
break;
case 107:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

		this.$ = new nodo("","melse");
		this.$.pushHijo("","Error");
		sintacticoMalos.push(new errorSintactico($$[$0-1],"error en melse",this._$.first_line,this._$.first_column));
	
break;
case 108:

	this.$ = new nodo("","mfor");
	this.$.pushHijo(new nodo($$[$0-10],"r_for"));
	this.$.pushHijo(new nodo($$[$0-9],"p_abrir"));
	this.$.pushHijo($$[$0-8]);
	this.$.pushHijo($$[$0-7]);
	this.$.nodos[3].nodos[2].tTraducido = ";";
	this.$.pushHijo($$[$0-6]);
	this.$.pushHijo(new nodo($$[$0-5],"r_puntocoma"));
	this.$.pushHijo($$[$0-4]);
	this.$.pushHijo(new nodo($$[$0-3],"p_cerrar"));
	this.$.pushHijo(new nodo($$[$0-2],"l_abrir"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo(new nodo($$[$0],"l_cerrar"));

break;
case 109:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

		this.$ = new nodo("","mfor");
		this.$.pushHijo("","Error");
		sintacticoMalos.push(new errorSintactico($$[$0-1],"error en mfor",this._$.first_line,this._$.first_column));
	
break;
case 110:

	this.$ = new nodo("","mwhile");
	this.$.pushHijo(new nodo($$[$0-6],"r_while"));
	this.$.pushHijo(new nodo($$[$0-5],"p_abrir"));
	this.$.pushHijo($$[$0-4]);
	this.$.pushHijo(new nodo($$[$0-3],"p_cerrar"));
	this.$.pushHijo(new nodo($$[$0-2],"l_abrir"));
	this.$.pushHijo($$[$0-1]);
	this.$.pushHijo(new nodo($$[$0],"l_cerrar"));

break;
case 111:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

		this.$ = new nodo("","mwhile");
		this.$.pushHijo("","Error");
		sintacticoMalos.push(new errorSintactico($$[$0-1],"error en mwhile",this._$.first_line,this._$.first_column));
	
break;
case 112:

	this.$ = new nodo("","mdo");
	this.$.pushHijo(new nodo($$[$0-8],"r_do"));
	this.$.pushHijo(new nodo($$[$0-7],"l_abrir"));
	this.$.pushHijo($$[$0-6]);
	this.$.pushHijo(new nodo($$[$0-7],"l_cerrar"));
	this.$.pushHijo(new nodo($$[$0-5],"r_while"));
	this.$.pushHijo(new nodo($$[$0-4],"p_abrir"));
	this.$.pushHijo($$[$0-3]);
	this.$.pushHijo(new nodo($$[$0-2],"p_cerrar"));
	this.$.pushHijo(new nodo($$[$0-1],"r_puntocoma"));

break;
case 113:

		console.error('Error Sintactico: ' + yytext + ' linea ' + this._$.first_line + ' columna ' + this._$.first_column);

		this.$ = new nodo("","mdo");
		this.$.pushHijo("","Error");
		sintacticoMalos.push(new errorSintactico($$[$0-1],"error en mdo",this._$.first_line,this._$.first_column));
	
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,8:$V2},{1:[3]},{1:[2,1]},{2:[1,9],6:6,9:[1,7],13:[1,8]},{7:[1,10]},{1:[2,4]},{2:$V0,4:11,5:$V1,8:$V2},{10:[1,12]},{10:[1,13]},{7:[1,14]},{2:$V0,4:15,5:$V1,8:$V2},{1:[2,2]},{11:[1,16]},{11:[1,17]},o($V3,[2,7]),{1:[2,3]},{2:$V4,5:$V5,7:$V6,12:18,16:20,26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},{2:$Vc,5:$Vd,7:$Ve,14:28,16:30,26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},o($V3,[2,5]),{2:[1,37],16:36,19:[1,35],23:33,24:[1,34],26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},{2:$Vf,10:$Vg,17:38},o($V3,[2,17]),o($Vh,$Vi,{18:41,7:$Vj,22:$Vk}),o($Vh,[2,29]),o($Vh,[2,30]),o($Vh,[2,31]),o($Vh,[2,32]),o($Vh,[2,33]),o($V3,[2,6]),{2:[1,47],15:44,16:46,19:[1,45],26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},{2:$Vf,10:$Vg,17:48},o($V3,$Vh),o($Vh,$Vi,{18:49,7:$Vj,22:$Vk}),{2:$V4,5:$V5,7:$V6,12:50,16:20,26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},{19:[1,51]},{10:[1,52]},{10:[1,53]},{7:[1,54],10:$Vi},{2:$V4,5:$V5,7:$V6,12:55,16:20,26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},{22:$Vl,33:$Vm,53:56,54:$Vn},{22:[1,59]},{2:$V4,5:$V5,7:$V6,12:60,16:20,26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},o($Vo,[2,19]),o($Vo,[2,20]),{2:$Vc,5:$Vd,7:$Ve,14:61,16:30,26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},{10:[1,62]},{10:[1,63]},{7:[1,64],10:$Vi},{2:$Vc,5:$Vd,7:$Ve,14:65,16:30,26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},{2:$Vc,5:$Vd,7:$Ve,14:66,16:30,26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},o($V3,[2,15]),{25:[1,67]},{20:[1,68]},{20:[1,69]},o($Vo,[2,24]),o($V3,[2,16]),{22:[1,70]},{10:[1,71]},{10:$Vp,20:$Vq,55:72,57:$Vr,58:75,59:$Vs,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},o($Vz,[2,50]),o($V3,[2,18]),o($V3,[2,8]),{20:[1,85]},{20:[1,86]},o($Vo,[2,14]),o($V3,[2,9]),o($V3,[2,11]),{20:[1,87]},{2:$VA,16:89,21:88,26:$V7,30:$VB,34:$V8,35:$V9,36:$Va,37:$Vb},{2:$VA,16:89,21:91,26:$V7,30:$VB,34:$V8,35:$V9,36:$Va,37:$Vb},o($Vz,[2,49]),{22:$Vl,33:$Vm,53:92,54:$Vn},{22:[2,55],33:[1,94],56:93},{10:$Vp,20:$Vq,58:95,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,58:96,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},o($VC,[2,58]),o($VC,$VD,{61:97,57:$VE,59:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o($VC,$VD,{61:113,57:$VE,59:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o($VC,$VD,{61:114,57:$VE,59:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o($VC,$VD,{61:115,57:$VE,59:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o($VT,[2,87],{65:116,20:[1,117]}),{10:$Vp,20:$Vq,55:118,57:$Vr,58:75,59:$Vs,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,58:119,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},o($VT,[2,84]),o($VT,[2,85]),{2:$VA,16:89,21:120,22:$VB,26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},{2:$VA,16:89,21:121,22:$VB,26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},{26:[1,122]},{30:[1,123]},{10:[1,124]},o($Vh,$Vi),{30:[1,125]},{22:[2,51]},{22:[2,52]},{10:[1,126]},o($VC,[2,56]),o($VC,[2,57]),o($VC,[2,59]),{10:$Vp,20:$Vq,58:127,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,58:128,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,58:129,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,58:130,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},o($VC,$VD,{61:131,57:$VE,59:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o($VC,$VD,{61:132,57:$VE,59:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),{10:$Vp,20:$Vq,58:133,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,58:134,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,58:135,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,58:136,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,58:137,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,58:138,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,58:139,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,58:140,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,58:141,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},o($VC,[2,60]),o($VC,[2,61]),o($VC,[2,62]),o($VC,$VD,{61:142,57:$VE,59:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),{10:$Vp,20:$Vq,30:$VU,58:144,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy,83:143},{30:[1,145]},o($VC,[2,65]),{22:[1,146]},{22:[1,147]},{27:[1,148]},{11:[1,149]},o($VV,$VW,{32:150,33:$VX}),{11:[1,152]},{22:$Vl,33:$Vm,53:153,54:$Vn},o($VC,[2,68]),o($VC,[2,69]),o($VC,[2,70]),o($VC,[2,71]),o($VC,[2,72]),o($VC,[2,73]),o($VC,[2,74]),o($VC,[2,75]),o($VC,[2,76]),o($VC,[2,77]),o($VC,[2,78]),o($VC,[2,79]),o($VC,[2,80]),o($VC,[2,81]),o($VC,[2,82]),o($VC,[2,63]),{30:[1,154]},{30:$VY,33:$VZ,84:155},o($VC,$VD,{61:157,57:$VE,59:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o($Vo,[2,12]),o($Vo,[2,13]),{28:[1,158]},{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:159,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},o($VV,[2,25]),{2:$VA,16:174,26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:175,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{22:[2,54]},o($VT,[2,86]),{30:[2,88]},{10:$Vp,20:$Vq,55:176,57:$Vr,58:75,59:$Vs,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},o($VC,[2,64]),{29:[1,177]},o($Vo,[2,22]),{2:$Vf,10:$Vg,17:178},{2:[1,184],20:[1,180],38:179,54:[1,181],70:[1,182],71:[1,183]},{10:$Vp,20:$Vq,22:[1,187],40:185,55:186,57:$Vr,58:75,59:$Vs,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{22:[1,188]},{22:[1,189]},{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:190,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{2:[1,193],20:[1,192],45:191},{2:[1,196],46:[1,195],47:194},{2:[1,199],48:[1,198],49:197},{2:[1,202],50:[1,201],51:200},o($Vo,[2,45]),o($Vh,$Vi,{52:203,7:[1,204],22:[1,205]}),{20:[1,206]},{20:[1,207]},{10:[1,208]},o($Vo,[2,23]),{30:$VY,33:$VZ,84:209},{30:[1,210]},{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:211,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:212,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{10:$Vp,20:$Vq,30:$VU,58:144,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy,83:213},{10:$Vp,20:$Vq,55:214,57:$Vr,58:75,59:$Vs,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{22:[1,215]},{22:[1,216]},{22:[1,217]},{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:218,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{22:[1,219]},o($Va1,[2,98]),{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:220,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:221,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},o($Vo,[2,40]),{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:222,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{10:$Vp,20:$Vq,55:223,57:$Vr,58:75,59:$Vs,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{7:[1,224]},{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:225,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{20:[1,226]},{7:[1,227]},{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:228,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{20:[1,229]},{7:[1,230]},{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:231,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{11:[1,232]},{22:[1,233]},o($Vo,[2,46]),o($Vo,[2,47]),{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:234,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{10:$Vp,20:$Vq,55:235,57:$Vr,58:75,59:$Vs,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{10:$Vp,20:$Vq,55:236,57:$Vr,58:75,59:$Vs,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},o($VV,$VW,{32:237,33:$VX}),{30:[2,90]},{11:[1,238]},o($Vo,[2,35]),o($Vo,[2,36]),{30:[1,239]},{22:[1,240]},o($Va1,[2,94]),o($Va1,[2,95]),o($Va1,[2,96]),o($Vo,[2,37]),o($Va1,[2,97]),o($Vo,[2,38]),o($Vo,[2,39]),o($Vo,[2,41]),{30:[1,241]},o($Va1,[2,102]),o($Vo,[2,42]),{2:$VA,16:242,26:$V7,34:$V8,35:$V9,36:$Va,37:$Vb},o($Va1,[2,109]),o($Vo,[2,43]),{10:$Vp,20:$Vq,55:243,57:$Vr,58:75,59:$Vs,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},o($Va1,[2,111]),o($Vo,[2,44]),{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:244,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},o($Va1,[2,113]),o($Vo,[2,48]),{30:[1,245]},{30:[1,246]},o($VV,[2,27]),{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:247,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{22:[1,248]},o($Va1,[2,93]),{11:[1,249]},{2:$Vf,10:$Vg,17:250},{30:[1,251]},{7:[1,252]},{22:[1,253]},{22:[1,254]},o($Vo,[2,21]),o($Va1,[2,92]),{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:255,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{10:$Vp,20:$Vq,55:256,57:$Vr,58:75,59:$Vs,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{11:[1,257]},{48:[1,258]},o($Va1,[2,99]),o($Va1,[2,100]),{7:[1,259]},{22:[1,260]},{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:261,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{20:[1,262]},o($Va1,$Vb1,{87:263,88:$Vc1}),{10:$Vp,20:$Vq,55:265,57:$Vr,58:75,59:$Vs,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{7:[1,266]},{10:$Vp,20:$Vq,55:267,57:$Vr,58:75,59:$Vs,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},o($Va1,[2,101]),{2:[1,271],11:[1,270],44:[1,269],89:268},{30:[1,272]},o($Va1,[2,110]),{30:[1,273]},o($Va1,[2,103]),{20:[1,274]},{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:275,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{7:[1,276]},{11:[1,277]},{22:[1,278]},{10:$Vp,20:$Vq,55:279,57:$Vr,58:75,59:$Vs,60:$Vt,62:$Vu,63:$Vv,64:79,66:$Vw,81:$Vx,82:$Vy},{7:[1,280]},o($Va1,[2,107]),{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:281,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},o($Va1,[2,112]),{30:[1,282]},o($Va1,$Vb1,{87:283,88:$Vc1}),{7:[1,284]},{11:[1,285]},o($Va1,[2,106]),o($Va1,[2,108]),{2:$V_,7:$V$,10:$V01,16:160,26:$V7,31:286,34:$V8,35:$V9,36:$Va,37:$Vb,39:$V11,41:$V21,42:$V31,43:165,44:$V41,46:$V51,48:$V61,50:$V71,85:$V81,86:$V91},{7:[1,287]},o($Va1,$Vb1,{87:288,88:$Vc1}),o($Va1,[2,105])],
defaultActions: {2:[2,1],5:[2,4],11:[2,2],15:[2,3],92:[2,51],93:[2,52],153:[2,54],155:[2,88],209:[2,90]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//variables
	const nodo = require("./arbol");
	class token {
	constructor(palabra, tipo, fila, columna) {
		this.palabra = palabra;
		this.tipo = tipo;
		this.fila = fila;
		this.columna = columna;
	}
}

	class errorToken {
		constructor(palabra, fila, columna) {
		this.palabra = palabra;
		this.fila = fila;
		this.columna = columna;
		}
	}

	class errorSintactico {
		constructor(palabra,esperado, fila, columna) {
		this.palabra = palabra;
		this.esperado = esperado;
		this.fila = fila;
		this.columna = columna;
		}
	}

	var tokensBuenos = new Array();
	var tokensMalos = new Array();
	var sintacticoBuenos = new Array();
	var sintacticoMalos = new Array();
	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://  espacios en blanco
break;
case 1:// comentario
break;
case 2:// comentario multiple
break;
case 3: tokensBuenos.push( new token(yy_.yytext,"r_true",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 81;
break;
case 4: tokensBuenos.push( new token(yy_.yytext,"r_false",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 5: tokensBuenos.push( new token(yy_.yytext,"r_int",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 6: tokensBuenos.push( new token(yy_.yytext,"r_string",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 7: tokensBuenos.push( new token(yy_.yytext,"r_double",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 8: tokensBuenos.push( new token(yy_.yytext,"r_bool",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37;
break;
case 9: tokensBuenos.push( new token(yy_.yytext,"r_char",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 10: tokensBuenos.push( new token(yy_.yytext,"r_while",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 48;
break;
case 11: tokensBuenos.push( new token(yy_.yytext,"r_do",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 12: tokensBuenos.push( new token(yy_.yytext,"r_if",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 13: tokensBuenos.push( new token(yy_.yytext,"r_else",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 88;
break;
case 14: tokensBuenos.push( new token(yy_.yytext,"r_for",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 15: tokensBuenos.push( new token(yy_.yytext,"r_switch",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'r_switch';
break;
case 16: tokensBuenos.push( new token(yy_.yytext,"r_case",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'r_case';
break;
case 17: tokensBuenos.push( new token(yy_.yytext,"r_default",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'r_default';
break;
case 18: tokensBuenos.push( new token(yy_.yytext,"r_break",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42;
break;
case 19: tokensBuenos.push( new token(yy_.yytext,"r_continue",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 20: tokensBuenos.push( new token(yy_.yytext,"r_return",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 21: tokensBuenos.push( new token(yy_.yytext,"r_public",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 5;
break;
case 22: tokensBuenos.push( new token(yy_.yytext,"r_static",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 24;
break;
case 23: tokensBuenos.push( new token(yy_.yytext,"r_void",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 19;
break;
case 24: tokensBuenos.push( new token(yy_.yytext,"r_main",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 25: tokensBuenos.push( new token(yy_.yytext,"r_args",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 26: tokensBuenos.push( new token(yy_.yytext,"r_class",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 9;
break;
case 27: tokensBuenos.push( new token(yy_.yytext,"r_interface",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 13;
break;
case 28: tokensBuenos.push( new token(yy_.yytext,"r_print",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'r_print';
break;
case 29: tokensBuenos.push( new token(yy_.yytext,"r_println",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'r_println';
break;
case 30: tokensBuenos.push( new token(yy_.yytext,"l_abrir",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 11;
break;
case 31: tokensBuenos.push( new token(yy_.yytext,"l_cerrar",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 7;
break;
case 32: tokensBuenos.push( new token(yy_.yytext,"p_abrir",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 20;
break;
case 33: tokensBuenos.push( new token(yy_.yytext,"p_cerrar",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 34: tokensBuenos.push( new token(yy_.yytext,"c_abrir",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 35: tokensBuenos.push( new token(yy_.yytext,"c_cerrar",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 36: tokensBuenos.push( new token(yy_.yytext,"r_modular",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'r_modular';
break;
case 37: tokensBuenos.push( new token(yy_.yytext,"r_mas",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 57;
break;
case 38: tokensBuenos.push( new token(yy_.yytext,"r_menos",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 39: tokensBuenos.push( new token(yy_.yytext,"r_asterisco",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68;
break;
case 40: tokensBuenos.push( new token(yy_.yytext,"r_diagonal",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 69;
break;
case 41: tokensBuenos.push( new token(yy_.yytext,"r_masmas",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70;
break;
case 42: tokensBuenos.push( new token(yy_.yytext,"r_menosmenos",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 43: tokensBuenos.push( new token(yy_.yytext,"r_menor",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72;
break;
case 44: tokensBuenos.push( new token(yy_.yytext,"r_mayor",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73;
break;
case 45: tokensBuenos.push( new token(yy_.yytext,"r_igual",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 46: tokensBuenos.push( new token(yy_.yytext,"r_not",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 66;
break;
case 47: tokensBuenos.push( new token(yy_.yytext,"r_and",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 78
break;
case 48: tokensBuenos.push( new token(yy_.yytext,"r_or",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 79;
break;
case 49: tokensBuenos.push( new token(yy_.yytext,"r_xor",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 80;
break;
case 50: tokensBuenos.push( new token(yy_.yytext,"r_menorigual",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 75;
break;
case 51: tokensBuenos.push( new token(yy_.yytext,"r_mayorigual",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74;
break;
case 52: tokensBuenos.push( new token(yy_.yytext,"r_igualigual",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 76;
break;
case 53: tokensBuenos.push( new token(yy_.yytext,"r_notigual",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 77;
break;
case 54: tokensBuenos.push( new token(yy_.yytext,"r_coma",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 55: tokensBuenos.push( new token(yy_.yytext,"r_dospuntos",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'r_dospuntos';
break;
case 56: tokensBuenos.push( new token(yy_.yytext,"r_puntocoma",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 22;
break;
case 57:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); tokensBuenos.push( new token(yy_.yytext,"r_cadena",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 58:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); tokensBuenos.push( new token(yy_.yytext,"r_caracter",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63;
break;
case 59: tokensBuenos.push( new token(yy_.yytext,"r_numero",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 60: tokensBuenos.push( new token(yy_.yytext,"r_id",yy_.yylloc.first_line, yy_.yylloc.first_column)); return 10;
break;
case 61:return 8;
break;
case 62:console.log("Error lexico: " + yy_.yytext + " Linea: " + yy_.yylloc.first_line + " Columna:  " + yy_.yylloc.first_column); tokensMalos.push(new errorToken(yy_.yytext,yy_.yylloc.first_line, yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/[\n]*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:system\.out\.print\b)/i,/^(?:system\.out\.println\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:%)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:"(.)*")/i,/^(?:'[a-zA-Z]')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[a-zA-Z]([a-zA-Z|0-9|_])*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorJS;
exports.Parser = analizadorJS.Parser;
exports.parse = function () { return analizadorJS.parse.apply(analizadorJS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}